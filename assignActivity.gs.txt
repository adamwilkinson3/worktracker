function assignActivity() {
  ss2 = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Members');
  ss3 = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Activities');
  ssRecover = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Recover');
  totalActiveMembers = ss2.getLastRow() - 2;
  var IndivActMDArray = [];
  var assignArray1 = [];
  var assignArray2 = [];
  var assignArray3 = [];
  var assignIndex = 0;
  var assignIndex2 = 0;
  var assignIndex3 = 0;
  var activityAssignment = 0;
  //var setCQ;
  
  for (a = 0; a <= totalActiveMembers - 1; a++) {
    IndivActMDArray[a] = new Array();
    for (b = 0; b <= 7; b++) {
      IndivActMDArray [a][b] = new Array();
      for (c = 0; c <= 7; c++) {
        IndivActMDArray [a][b][c] = 0;
      }
    }
  }

  /*
  //Increase CQ timer by one  (Requires a column to be specified)
  for (i = 0; i <= totalActiveMembers - 1; i++) {
    setCQ = ss2.getRange(i + 3, ).getValue();
    setCQ++;
    ss2.getRange(i + 3, ).setValue(setCQ);
  }
  */
  
  //Read Activity Sheet
  
  updateActivities();
  
  //Read Active Roster and Create Multidimensional Array
  // i - index
  // j - 0 => name, 1 => snack shop, 2 => base Tour, 3 => squadron Tour, 4 => PT
  //     5 => CQ, 6 => activity weight, 7 => rope
  // k - 0 => name, 1 => Monday, 2 => Tuesday, ...

      
  for (i = 0; i <= totalActiveMembers - 1; i++) {
    IndivActMDArray [i][0][0] = ss2.getRange(i + 3, 2).getValue();  //member's name
    IndivActMDArray [i][7][1] = ss2.getRange(i + 3, 10).getValue(); //Exclusion
    if (ss2.getRange(i + 3, 2).getBackground() == '#800080') {            //purple
        IndivActMDArray [i][7][0] = 0;
      } else if (ss2.getRange(i + 3, 2).getBackground() == '#008000') {   //green
        IndivActMDArray [i][7][0] = 1;
      } else {
        IndivActMDArray [i][7][0] = 2;
      }
    
    for (j = 1; j <= 5; j++) {   //number of activities
      IndivActMDArray [i][j][0] = ss2.getRange(i + 3, j + 2).getValue();   //fill array
    }
      for (k = 2; k <= 20; k++) {
        for (l = 1; l <= 7; l++) {
          if (ss3.getRange(k, l + 1).getValue() == IndivActMDArray [i][0][0]) {
            if (k <= 3) {           //snack shop
              IndivActMDArray [i][1][l] = 1;
              IndivActMDArray [i][6][0] = IndivActMDArray [i][6][0] + 1;
            } else if (k <= 5) {    //base Tour
              IndivActMDArray [i][2][l] = 1;
              IndivActMDArray [i][6][0] = IndivActMDArray [i][6][0] + 1;
            } else if (k <= 7) {    //squadron tour
              IndivActMDArray [i][3][l] = 1;
              IndivActMDArray [i][6][0] = IndivActMDArray [i][6][0] + 1;
            } else if (k <= 14) {   //PT
              IndivActMDArray [i][4][l] = 1;
              IndivActMDArray [i][6][0] = IndivActMDArray [i][6][0] + 1;
            } else {                //CQ
              IndivActMDArray [i][5][l] = 1;
              IndivActMDArray [i][6][0] = IndivActMDArray [i][6][0] + 2;
            }
          }
        }
      }
  }
  
 
  //Assign activity
  
  for (y = 2; y <= 13; y++) {
    for (x = 8; x >= 2; x--) {
      if (ss3.getRange(y, x).isBlank()) {
        counterMin = 99;
        assignIndex = 0;
        for (i = 0; i <= totalActiveMembers - 1; i++) {  //across day
          if (IndivActMDArray [i][7][1] == 3) {
              continue;
            }
          if (y == 2) {              //Snack Shop
            j = 1;
            ropeRequirement = 1;
          } else if (y == 3) {
            j = 1;
            ropeRequirement = 0;
          } else if (y == 4) {       //Base Tour
            j = 2;
            ropeRequirement = 1;
            if (IndivActMDArray [i][7][1] == 1) {
              continue;
            }
          } else if (y == 5) {
            j = 2;
            ropeRequirement = 0;
            if (IndivActMDArray [i][7][1] == 1) {
              continue;
            }
          } else if (y == 6) {       //Squadron Tour
            j = 3;
            ropeRequirement = 1;
            if (IndivActMDArray [i][7][1] == 1) {
              continue;
            }
          } else if (y == 7) {
            j = 3;
            ropeRequirement = 0;
            if (IndivActMDArray [i][7][1] == 1) {
              continue;
            }
          } else if (y == 8) {       //PT
            j = 4;
            ropeRequirement = 2;     //at least one yellow
            if (IndivActMDArray [i][7][1] == 2) {
              continue;
            }
          } else if (y == 9) {
            j = 4;
            ropeRequirement = 1;     //one yellow or green
            if (IndivActMDArray [i][7][1] == 2) {
              continue;
            }
          } else if (y <= 13) {
            j = 4;
            ropeRequirement = 0;
            if (IndivActMDArray [i][7][1] == 2) {
              continue;
            }
          }
          counter = 0;
          for (jj = 1; jj <= 5; jj++) {
            if (IndivActMDArray[i][jj][x - 1] == 1) {
              counter++;
            }
          }
          if (counter < counterMin) {
            assignArray1 = [];
            counterMin = counter;
            assignIndex = 0;
            assignArray1 [assignIndex] = i;
            assignIndex++;
          } else if (counter == counterMin) {
          assignArray1 [assignIndex] = i;
            assignIndex++;
          }
        }

        
        counterMin = 99;
        assignIndex2 = 0;
        for (Index = 0; Index <= assignIndex - 1; Index++) {                       //across activity
          counter = 0;
          if (IndivActMDArray [assignArray1[Index]][7][0] >= ropeRequirement) {     //rope
            for (k = 1; k <= 7; k++) {
              if (IndivActMDArray [assignArray1[Index]][j][k] == 1) {
                counter++;
              }
            }
            if (counter < counterMin) {
              assignArray2 = [];
              counterMin = counter;
              assignIndex2 = 0;
              assignArray2 [assignIndex2] = assignArray1[Index];
              assignIndex2++;
            } else if (counter == counterMin) {
              assignArray2 [assignIndex2] = assignArray1[Index];
              assignIndex2++;
            }
          }
      }
          
          minWeight = 99;
          assignIndex3 = 0;
          for (Index = 0; Index <= assignIndex2 - 1; Index++) {               //total weight
            if (IndivActMDArray [assignArray2[Index]][6][0] == minWeight) {
              assignArray3 [assignIndex3] = assignArray2 [Index]
              assignIndex3++;
            } else if (IndivActMDArray [assignArray2[Index]][6][0] < minWeight) {
              minWeight = IndivActMDArray [assignArray2[Index]][6][0];
              assignIndex3 = 0;
              assignArray3 = [];
              assignArray3 [assignIndex3] = assignArray2 [Index];
              assignIndex3++;
            }
            
            //Randomly Chooses Member
            
            if(assignArray3.length > 0) {
              N = Math.floor(Math.random() * 100) % assignArray3.length
              activityAssignment = assignArray3[N];
              ss3.getRange(y, x).setValue(IndivActMDArray [activityAssignment][0][0]);
            }
          }
        
          //Updates Array data
          if (assignArray3.length > 0) {
            IndivActMDArray [activityAssignment][j][x - 1] = IndivActMDArray [activityAssignment][j][x - 1] + 1;
            IndivActMDArray [activityAssignment][j][0] = IndivActMDArray [activityAssignment][j][0] + 1;
            IndivActMDArray [activityAssignment][6][0] = IndivActMDArray [activityAssignment][6][0] + 1;
          }

          assignArray1 = [];
          assignArray2 = [];
          assignArray3 = [];
          assignIndex = 0;
          assignIndex2 = 0;
          assignIndex3 = 0;
          activityAssignment = 0;
      }  //end ifBlank
    }  //end x
  }  //end y

  //Update Members data
  for (y = 0; y <= totalActiveMembers - 1; y++) {
    for (x = 1; x <= 6; x++) {
      ss2.getRange(y + 3, x + 2).setValue(IndivActMDArray[y][x][0]);
    }
  }
  
  
  
  
  //Save Current Assignment in 'Update' under Recovery
  
  var source_range = ss3.getRange(1, 1, 21, 8);
  var target_range = ssRecover.getRange(26, 2, 21, 8);
  
  source_range.copyTo(target_range);
  
  // Display Array (Name-SnackShop-Monday-Tuesday-Wednesday-Thursday-Friday-Saturday-Sunday-BaseTour-Monday...)
  /*
  for (z = 0; z <= totalActiveMembers - 1; z++) {
    ss3.getRange(z + 40, 1).setValue(IndivActMDArray[z][0][0]);
  }
  for (x = 0; x <= 7; x++) {
    for (y = 1; y <= 7; y++) {
      for (z = 0; z <= totalActiveMembers - 1; z++) {
        ss3.getRange(z + 40, (y - 1) * 8 + x + 2).setValue(IndivActMDArray[z][y][x]);
      }
    }
  }
  */
}  //end assignActivity